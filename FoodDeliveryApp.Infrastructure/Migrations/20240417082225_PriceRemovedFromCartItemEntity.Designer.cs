// <auto-generated />
using System;
using FoodDeliveryApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryApp.Infrastructure.Migrations
{
    [DbContext(typeof(FoodDeliveryAppDbContext))]
    [Migration("20240417082225_PriceRemovedFromCartItemEntity")]
    partial class PriceRemovedFromCartItemEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.AddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AddOns");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9e8b039-26c3-4a70-bbf8-3c06897c3f0e",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanya",
                            LastName = "Yordanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKqKCEhs8XC8EAmaj09uRRpCnGysTbOT1d3eRvwcCpCYSQNLnuWuZ0Lo2D5Jlfo6nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d107f1fa-7f7b-408a-bd43-e9b56e9e2ff1",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = "ec6b753c-96eb-4fd3-a6b4-5b4cadb367ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee20f7f6-bbbe-44e5-a315-bf676528da43",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanya",
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA+z4PPldgcKG65FAPUSEHaUGtmT2saNhwl1gnrkhMUDorJwhrOophIMXFS4GlZSZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2f2b46c-d4bc-4b8e-b46b-f01ca47d00a7",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogArticleCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BlogArticleCategories");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BlogArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogArticleComments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "София"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Варна"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeggie")
                        .HasColumnType("bit");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SpicyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SpicyCategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0.0,
                            Description = "4\" питка, криспи чикън кюфте, майонеза, домати, айсберг",
                            ImageURL = "~/images/Amerikanska/BurgerKing/BurgerCrispyChicken.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 1,
                            Price = 9.95m,
                            RestaurantId = 1,
                            SpicyCategoryId = 1,
                            Title = "Бургер Crispy Chicken (183г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 0.0,
                            Description = "4 1/2\" питка, тендър крисп, майонеза, домати, айсберг",
                            ImageURL = "~/images/Amerikanska/BurgerKing/BurgerTenderCrisp.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 1,
                            Price = 12.65m,
                            RestaurantId = 1,
                            SpicyCategoryId = 1,
                            Title = "Бургер Tender Crisp (283г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 0.0,
                            Description = "пресни домати, босилек и сирене Моцарела",
                            ImageURL = "~/images/Mestna_hrana/Tarator/Salata_Kapreze.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 2,
                            Price = 6.76m,
                            RestaurantId = 2,
                            SpicyCategoryId = 1,
                            Title = "Салата Капрезе (300г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 0.0,
                            Description = "Традиционна българска мусака",
                            ImageURL = "~/images/Mestna_hrana/Tarator/Musaka.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 3,
                            Price = 11.20m,
                            RestaurantId = 2,
                            SpicyCategoryId = 1,
                            Title = "Мусака (350г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 0.0,
                            Description = "Капучино с топка сладолед Mока",
                            ImageURL = "~/images/Zakuska/Mikel_Coffee/Cappuccino_Mocha.png",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 4,
                            Price = 6.90m,
                            RestaurantId = 3,
                            SpicyCategoryId = 1,
                            Title = "Капучино Мока",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 0.0,
                            Description = "Класическа бисквитена торта",
                            ImageURL = "~/images/Zakuska/Mikel_Coffee/Biscuit_Cake.png",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 5,
                            Price = 7.40m,
                            RestaurantId = 3,
                            SpicyCategoryId = 1,
                            Title = "Бисквитена торта - Biscuit cake",
                            TotalReviews = 0
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemAddOn", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("AddOnId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "AddOnId");

                    b.HasIndex("AddOnId");

                    b.ToTable("ItemsAddOns");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Пилешки бургери"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Салати"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Основни"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Горещи напитки"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Десерти"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemReviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemSpicyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ItemSpicyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Не лютиво"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Леко лютиво"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Средно лютиво"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Много лютиво"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNowToBeDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaidOnDelivery")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TimeOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MaxDeliveryTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("MinDeliveryTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RestaurantCategoryId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul. \"Sitnyakovo\", 48, 1505, Oborishte, Sofia, Bulgaria",
                            AverageRating = 0.0,
                            CityId = 1,
                            ClosingHour = new DateTime(1900, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageURL = "~/images/Amerikanska/BurgerKing/BurgerKingBackground.jpg",
                            Latitude = 42.691631000000001,
                            Longitude = 23.353459999999998,
                            MaxDeliveryTimeInMinutes = 40,
                            MinDeliveryTimeInMinutes = 30,
                            OpeningHour = new DateTime(1900, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantCategoryId = 2,
                            ServiceFee = 3.99m,
                            Title = "Burger King",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "\"Hristo Botev\" Blvd 117, 1303 Sofia Center, Sofia, Bulgaria",
                            AverageRating = 0.0,
                            CityId = 1,
                            ClosingHour = new DateTime(1900, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageURL = "~/images/Mestna_hrana/Tarator/TaratorBackground.jpg",
                            Latitude = 42.703980000000001,
                            Longitude = 23.316980000000001,
                            MaxDeliveryTimeInMinutes = 60,
                            MinDeliveryTimeInMinutes = 50,
                            OpeningHour = new DateTime(1900, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            RestaurantCategoryId = 13,
                            ServiceFee = 4.99m,
                            Title = "Tarator",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "bulevard \"Cherni vrah\" 100, 1407 Krastova vada, Sofia, Bulgaria",
                            AverageRating = 0.0,
                            CityId = 1,
                            ClosingHour = new DateTime(1900, 1, 1, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageURL = "~/images/Zakuska/Mikel_Coffee/MikelCoffeeBackground.jpg",
                            Latitude = 42.653649999999999,
                            Longitude = 23.31541,
                            MaxDeliveryTimeInMinutes = 50,
                            MinDeliveryTimeInMinutes = 40,
                            OpeningHour = new DateTime(1900, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantCategoryId = 7,
                            ServiceFee = 1.99m,
                            Title = "Mikel Coffee",
                            TotalReviews = 0
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.RestaurantCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Азиатска"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Американска"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Арабска"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Вегетарианска"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Гръцка"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Десерти"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Закуска"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Здравословна"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Индийска"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Италианска"
                        },
                        new
                        {
                            Id = 11,
                            Title = "Международна"
                        },
                        new
                        {
                            Id = 12,
                            Title = "Мексиканска"
                        },
                        new
                        {
                            Id = 13,
                            Title = "Местна храна"
                        },
                        new
                        {
                            Id = 14,
                            Title = "Морски дарове"
                        },
                        new
                        {
                            Id = 15,
                            Title = "Напитки"
                        },
                        new
                        {
                            Id = 16,
                            Title = "Паста"
                        },
                        new
                        {
                            Id = 17,
                            Title = "Печива и сладкиши"
                        },
                        new
                        {
                            Id = 18,
                            Title = "Сандвич"
                        },
                        new
                        {
                            Id = 19,
                            Title = "Средиземноморска"
                        },
                        new
                        {
                            Id = 20,
                            Title = "Суши"
                        },
                        new
                        {
                            Id = 21,
                            Title = "Турска"
                        },
                        new
                        {
                            Id = 22,
                            Title = "Чай и кафе"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleCategory", "BlogArticleCategory")
                        .WithMany("BlogArticles")
                        .HasForeignKey("BlogArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogArticleCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleComment", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", null)
                        .WithMany("BlogArticleComments")
                        .HasForeignKey("BlogArticleId");

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Item", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Items")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ItemSpicyCategory", "SpicyCategory")
                        .WithMany("Items")
                        .HasForeignKey("SpicyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");

                    b.Navigation("Restaurant");

                    b.Navigation("SpicyCategory");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemAddOn", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.AddOn", "AddOn")
                        .WithMany("ItemsAddOns")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Item", "Item")
                        .WithMany("ItemsAddOns")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddOn");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemReview", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.RestaurantCategory", "RestaurantCategory")
                        .WithMany("Restaurants")
                        .HasForeignKey("RestaurantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("RestaurantCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.AddOn", b =>
                {
                    b.Navigation("ItemsAddOns");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", b =>
                {
                    b.Navigation("BlogArticleComments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleCategory", b =>
                {
                    b.Navigation("BlogArticles");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.City", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Item", b =>
                {
                    b.Navigation("ItemsAddOns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemSpicyCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.RestaurantCategory", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
