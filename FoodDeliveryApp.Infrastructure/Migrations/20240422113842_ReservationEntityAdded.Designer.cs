// <auto-generated />
using System;
using FoodDeliveryApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryApp.Infrastructure.Migrations
{
    [DbContext(typeof(FoodDeliveryAppDbContext))]
    [Migration("20240422113842_ReservationEntityAdded")]
    partial class ReservationEntityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.AddOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AddOns");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5f7b994-c510-41eb-895b-cfb31a70d14e",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanya",
                            LastName = "Yordanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBU/Bb0Oa68qUd10jcxix2MQ9aWOP/BabR+gI5jKFZD+oljDR+dDT3IbDUFULGYULw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8dedb34d-b229-440b-aa14-69dd30f83f0e",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = "ec6b753c-96eb-4fd3-a6b4-5b4cadb367ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3a0adfa-3de1-4c79-a562-8f05fd47c969",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanya",
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE4Buts8/5DFMleo/N50c3r+c/lDr79NAeOQeXRxpNMfM7+/4oQSYghfppNKw777Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c38f983e-2a9e-4205-bbe1-c16854bdd899",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BlogArticleCategoryId");

                    b.ToTable("BlogArticles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogArticleCategoryId = 1,
                            Content = "Когато поемаме по пътя към по-здравословен начин на живот, е изключително важно да правим разлика между фактите и митовете, особено когато става въпрос за здравословно хранене. В SmartDiet развенчаваме тези митове, като Ви представяме основани на доказателства насоки, съобразени с Вашите уникални нужди.\r\n\r\nНека да разбулим някои често срещани митове и да обърнем внимание на доказаните методи, които подпомагат здравословния начин на живот:\r\n\r\nУниверсалните диети са подходящи за всички\r\nВ сферата на здравословното хранене битува митът, че един универсален хранителен режим може магически да отключи вратите към доброто здраве за всички. Нашите тела са различни и всяко от тях има собствен метаболизъм, хранителни нужди и предпочитания. Подходът на SmartDiet се основава на разбирането, че физиологията, предпочитанията и целите на всеки човек са уникални. Вашият път към оптимално здраве е личен и нашият ангажимент е да предоставяме персонализирани хранителни планове, които резонират с вашата индивидуалност. \r\n\r\nЗдравословното хранене е скучно и безвкусно\r\nМитът, че здравословната храна е скучна, често се дължи на непознаване на разнообразното и питателно готвене. Погрешно схващане е, че здравословното хранене е равносилно на отказ от вкуса и удоволствията. В действителност хранителният начин на живот може да бъде динамичен, разнообразен и изключително удовлетворяващ. Богатите на хранителни вещества храни, като цветни плодове, зеленчуци,  протеини и пълнозърнести храни, могат да бъдат в основата на вкусни и разнообразни видове ястия.\r\n\r\nВъглехидратите са враг\r\nВъглехидратите са важен източник на енергия за организма. От значение са качеството и видът на въглехидратите. Пълнозърнестите храни, плодовете и зеленчуците са богати на хранителни вещества въглехидрати, които предлагат фибри, витамини и минерали. Високо преработените въглехидрати, съдържащи захар, са тези, към които трябва да се подхожда с повишено внимание. Балансираният подход към въглехидратите и изборът на правилните им източници могат да бъдат съюзник по пътя към по-добро здраве.\r\n\r\nПропускането на хранения помага за намаляване на теглото\r\nПротивно на общоприетото схващане, пропускането на хранения не е равносилно на загуба на тегло. То често води до преяждане по-късно, като нарушава работата на метаболизма Ви. В SmartDiet наблягаме на балансирано хранене за устойчива енергия и ефективно управление на теглото, като се фокусираме върху редовно подхранване на организма с естествени хранителни вещества.\r\n\r\nЗдравословното хранене е скъпо\r\nЧесто срещано погрешно схващане е, че здравословното хранене е свързано с висока цена. Здравословното хранене, обаче, може да бъде и на достъпна цена. Местните, сезонни продукти и умното планиране могат да направят храненето бюджетно и изгодно. Хранителният режим на SmartDiet Ви напътства да правите икономични, но питателни избори, доказвайки, че здравословният начин на живот не трябва да струва скъпо.\r\n\r\nДиетите за детоксикация изчистват токсините бързо\r\nДетоксикиращите диети обещават бързо решение на проблема чрез изчистване на организма от токсини, но тялото има изградена система за детоксикация – черния дроб и бъбреците. Устойчивото здраве се постига чрез възприемане на навици, които подпомагат тези естествени процеси, а не чрез екстремни диети. Вместо бързи решения, се съсредоточете върху балансирана диета, хидратация и избор на начин на живот, които насърчават дългосрочното благополучие. Не забравяйте, че детоксикацията на организма е непрекъснат процес, а не еднократно събитие.\r\n\r\nРазграничаването на фактите от митовете е от ключово значение за създаването на устойчив и ефективен подход към здравословното хранене. \r\n\r\nНека заедно поемем по Вашия път към по-удовлетворяващ и здравословен начин на живот!",
                            Image = "~/images/Blog/Zdravoslovno_hranene/Mitove_za_zdravoslovnoto_hranene.jpg",
                            Likes = 0,
                            PublicationDate = new DateTime(2024, 1, 22, 11, 38, 41, 144, DateTimeKind.Utc).AddTicks(9133),
                            ReadingTime = 3,
                            Title = "Митове за здравословното хранене"
                        },
                        new
                        {
                            Id = 2,
                            BlogArticleCategoryId = 2,
                            Content = "В стремежа към по-здравословен начин на живот и устойчиво отслабване често се споменава терминът – „суперхрани“. Тези пълни с хранителни вещества източници на енергия не са просто тенденция, а ключ към разгръщане на потенциала на тялото Ви. \r\n\r\nНека навлезем в света на суперхраните и да разберем техният принос за по-добро здраве:\r\n\r\nСуперхраните са богати на основни хранителни вещества, витамини, минерали и антиоксиданти. Тези съединения, често срещани в растителните храни, предлагат редица ползи за здравето – от укрепване на имунната система до подпомагане на храносмилането и подобряване на когнитивните функции.\r\n\r\nЗащо суперхраните са важни за регулиране на теглото? \r\n\r\nСуперхраните са богати на фибри и протеини, които ви държат сити по-дълго време и намаляват общия прием на калории.\r\nСуперхрани като семената от чиа и зеленият чай подобряват метаболизма, което спомага за намаляване на теглото.\r\nПредлагат основни хранителни вещества с по-малко калории, което Ви гарантира, че получавате жизненоважни елементи без излишен прием на енергия.\r\nСъвети за ежедневен прием на суперхрани\r\n\r\nСладки картофи – сладките картофи са пълни с витамини А и С и са чудесен източник на диетични фибри. Те са с високо съдържание на бета-каротин, вид витамин А, който е от съществено значение за здравето на очите и засилва имунната система. Сладките картофи съдържат и калий, който подпомага здравето на сърцето и регулира кръвното налягане. \r\nСпанак – с високо съдържание на желязо, спанакът подпомага производството на червени кръвни телца. Той е богат и на витамин К, който е от съществено значение за здравето на костите, както и на антиоксиданти, предпазващи организма от свободните радикали.\r\nСемена от чиа – въпреки малкия си размер, семената от чип са изключително питателни. Те са отличен източник на омега-3 мастни киселини, които са от съществено значение за здравето на мозъка и за намаляване на възпаленията в организма. Богати и на диетични фибри – разтворими и неразтворими, които подпомагат храносмилането, семената от чип спомагат за поддържането на здравословно тегло.\r\nБанани – бананите са едни от най-популярните плодове в световен мащаб и за това има основателна причина. Те са богати на калий – основен минерал за поддържане на правилната функция на сърцето и мускулите. Освен това те осигуряват естествени захари като глюкоза, фруктоза и захароза, предлагайки бърз енергиен заряд по по-здравословен начин в сравнение с преработените захари, които се съдържат в много закуски и десерти.\r\nАвокадо – богато на мононенаситени мазнини, които са полезни за сърцето и могат да помогнат за понижаване на нивата на лошия холестерол. Авокадото осигурява витамини Е и С, и двата мощни антиоксиданти, които поддържат имунната система и здравето на кожата. Те са богати на фибри, подпомагат храносмилането, насърчават усещането за ситост и помагат за поддържане на стабилни нива на кръвната захар.\r\nКиноа – безглутенова пълнозърнеста храна с високо съдържание на протеини, съдържаща всички девет основни аминокиселини. Тя е с високо съдържание на фибри, подпомагащи храносмилането и е богата на минерали като магнезий и фосфор.\r\nБадеми – Бадемите са богати на витамин Е – антиоксидант, който поддържа здравето на кожата и укрепва имунната система. Освен това те осигуряват важни минерали като магнезий, който е от решаващо значение за функцията на мускулите и нервите, както и калций за здрави кости.\r\nВключвайки тези съставки в диетата си, Вие осигурявате на организма си основни хранителни вещества, антиоксиданти и фибри. Тези компоненти работят заедно, за да поддържат имунната система, да подпомагат храносмилането и да осигуряват прилив на енергия. Освен това те придават възхитителен вкус и текстура на ястията Ви, превръщайки здравословното хранене във вкусно и приятно преживяване!",
                            Image = "~/images/Blog/Superhrani/Super_hrani_kakvo_trqbva_da_znaem.jpg",
                            Likes = 0,
                            PublicationDate = new DateTime(2024, 3, 8, 11, 38, 41, 144, DateTimeKind.Utc).AddTicks(9182),
                            ReadingTime = 3,
                            Title = "Суперхрани – какво трябва да знаем за тях?"
                        },
                        new
                        {
                            Id = 3,
                            BlogArticleCategoryId = 3,
                            Content = "С напредване на възрастта, храненето може да помогне за подобряване на качеството на живот – за добра умствена дейност, енергия и устойчивост към болести.\r\n\r\nНадяваме се тези съвети за хранене да Ви бъдат от полза.\r\n\r\nХранене за тялото и ума\r\n\r\nЗдравословното хранене е важно на всяка възраст, но значението му нараства около средата на живота и след това. Но то не трябва да е свързано със сурова диета и с лишения. Важно е да се наслаждавате на прясна, вкусна храна, здравословни съставки и да се храните в компанията на приятели и семейството.\r\n\r\nНезависимо от възрастта или предишните хранителни навици, никога не е късно да промените начина си на хранене и от там – начина, по който се чувствате.\r\n\r\nХраната е здраве и сила. Доброто хранене може да засили имунитета, да се бори с болестотворните токсини, да поддържа теглото и да намали риска от сърдечно-съдови заболявания, инсулт, високо кръвно налягане, диабет тип 2, загуба на костна плътност и рак. Наред с физическата активност, балансираната диета също може да допринесе за общия тонус и здраве с напредване на възрастта.\r\n\r\nХранете мозъка. Хората, които ядат плодове, листни зеленчуци, риба и ядки, пълни с омега-3 мастни киселини, могат да подобрят фокуса и да намалят риска от болестта на Алцхаймер. Зеленият чай, богат на антиоксиданти, също може да подобри паметта и психическата устойчивост с напредване на възрастта.\r\n\r\nУсещане за щастие. Богатите ястия могат да дадат повече енергия и да помогнат да изглеждате по-добре, което води до повишаване на настроението и самочувствието. Всичко е свързано – когато тялото се чувства добре, се чувствате по-щастливи отвътре и отвън.\r\n\r\nЗдравословното хранене е повече от храна\r\n\r\nДоброто хранене е нещо много повече от качеството и разнообразието на храната. Важно е и удоволствието от яденето, което се увеличава при споделяне. Храненето с други хора може да бъде толкова важно, колкото добавянето на витамини към диетата. Социалната атмосфера стимулира ума, прави храненето по-приятно и може да помогне да се придържате към плана си за здравословно хранене.\r\n\r\nКлючът към здравословното хранене е да се съсредоточите върху минимално обработена храна, от която тялото се нуждае с напредване на възрастта – храна, която е възможно най-близка до естествената си форма. Телата ни реагират по различен начин на различни храни, в зависимост от генетиката и други здравословни фактори, така че намирането на здравословна лична диета, може да отнеме време.\r\n\r\nТези съвети са добро начало:\r\n\r\nЯжте много плодове и зеленчуци. Не спирайте до ябълките и бананите, избирайте богати на цвят горски плодове или пъпеши. Стремете се към 2-3 порции на ден. Когато става въпрос за зеленчуци, изберете богати на антиоксиданти, тъмни, листни зеленчуци като зеле, спанак и броколи, както и цветни зеленчуци като моркови и тикви. Направете зеленчуците по-апетитни, като ги поръсите със зехтин, с козе сирене.\r\n\r\nИзберете калций за здравето на костите. Поддържането на здравето на костите с напредване на възрастта зависи от адекватния прием на калций за предотвратяване на остеопороза и костни фрактури. Добрите източници включват мляко, кисело мляко, сирене или немлечни продукти като тофу, броколи, бадеми и къдраво зеле.\r\n\r\nИзберете „добрите мазнини“, а не храна „без мазнини“. Вместо да се опитвате да отрежете мазнините от диетата си, съсредоточете се върху насладата от здравословни мазнини като омега-3, които могат да защитят тялото от болести и да поддържат настроението и мозъчната функция.\r\n\r\nРазнообразете източниците на протеини. С напредване на възрастта, яденето на достатъчно висококачествен протеин може да подобри настроението, да повиши устойчивостта на стрес, тревожността и депресията и дори да помогне да мислите по-ясно. Консумацията на твърде много протеини от преработени месни продукти като хот-дог, бекон и салам може да увеличи риска от сърдечни заболявания, рак и други здравословни проблеми. Разнообразявайте източниците на протеини, вместо да разчитате само на червено месо, като включите в диетата повече риба, боб, грах, яйца, ядки и семена.\r\n\r\nЯжте повече фибри. Диетичните фибри могат да направят много повече от това, да осигурят добра работа на стомаха и червата. Те могат да намалят риска от сърдечни заболявания, инсулт и диабет, да подобрят здравето на кожата и да помогнат да отслабнете. С напредване на възрастта, храносмилането става по-малко ефективно, така че е важно да включите достатъчно фибри в диетата си. Жените над 50 години трябва да се стремят да ядат поне 21 грама фибри на ден, мъжете над 50 – поне 30 грама на ден.\r\n\r\nБъдете мъдри към въглехидратите. Изберете пълнозърнести храни пред преработено бяло брашно за повече хранителни вещества и фибри и намалете захарта и рафинираните въглехидрати. Докато сетивата за вкус и мирис отслабват с възрастта, ние запазваме способността да различаваме сладките вкусове, което е причина много възрастни хора да консумират повече захар и рафинирани въглехидрати, отколкото е здравословно. За разлика от сложните въглехидрати, които са богати на фибри, рафинираните или прости въглехидрати (като бял ориз, бяло брашно, рафинирана захар) могат да доведат до драстичен скок на кръвната захар, последван от бърз срив, който ви кара да се чувствате гладни и податливи на преяждане. ",
                            Image = "~/images/Blog/Hranene_i_vuzrast/Hranene_i_vuzrast.jpg",
                            Likes = 0,
                            PublicationDate = new DateTime(2023, 11, 22, 11, 38, 41, 144, DateTimeKind.Utc).AddTicks(9187),
                            ReadingTime = 4,
                            Title = "Хранене и възраст"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BlogArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Здравословно хранене"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Суперхрани"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Хранене и възраст"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BlogArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogArticleComments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "София"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Варна"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeggie")
                        .HasColumnType("bit");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SpicyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SpicyCategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0.0,
                            Description = "4\" питка, криспи чикън кюфте, майонеза, домати, айсберг",
                            ImageURL = "~/images/Amerikanska/BurgerKing/BurgerCrispyChicken.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 1,
                            Price = 9.95m,
                            RestaurantId = 1,
                            SpicyCategoryId = 1,
                            Title = "Бургер Crispy Chicken (183г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 0.0,
                            Description = "4 1/2\" питка, тендър крисп, майонеза, домати, айсберг",
                            ImageURL = "~/images/Amerikanska/BurgerKing/BurgerTenderCrisp.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 1,
                            Price = 12.65m,
                            RestaurantId = 1,
                            SpicyCategoryId = 1,
                            Title = "Бургер Tender Crisp (283г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 0.0,
                            Description = "пресни домати, босилек и сирене Моцарела",
                            ImageURL = "~/images/Mestna_hrana/Tarator/Salata_Kapreze.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 2,
                            Price = 6.76m,
                            RestaurantId = 2,
                            SpicyCategoryId = 1,
                            Title = "Салата Капрезе (300г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 0.0,
                            Description = "Традиционна българска мусака",
                            ImageURL = "~/images/Mestna_hrana/Tarator/Musaka.jpg",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 3,
                            Price = 11.20m,
                            RestaurantId = 2,
                            SpicyCategoryId = 1,
                            Title = "Мусака (350г)",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 0.0,
                            Description = "Капучино с топка сладолед Mока",
                            ImageURL = "~/images/Zakuska/Mikel_Coffee/Cappuccino_Mocha.png",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 4,
                            Price = 6.90m,
                            RestaurantId = 3,
                            SpicyCategoryId = 1,
                            Title = "Капучино Мока",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 0.0,
                            Description = "Класическа бисквитена торта",
                            ImageURL = "~/images/Zakuska/Mikel_Coffee/Biscuit_Cake.png",
                            IsFavourite = false,
                            IsVeggie = false,
                            ItemCategoryId = 5,
                            Price = 7.40m,
                            RestaurantId = 3,
                            SpicyCategoryId = 1,
                            Title = "Бисквитена торта - Biscuit cake",
                            TotalReviews = 0
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemAddOn", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("AddOnId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "AddOnId");

                    b.HasIndex("AddOnId");

                    b.ToTable("ItemsAddOns");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Пилешки бургери"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Салати"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Основни"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Горещи напитки"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Десерти"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemReviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemSpicyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ItemSpicyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Не лютиво"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Леко лютиво"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Средно лютиво"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Много лютиво"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNowToBeDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaidOnDelivery")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TimeOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MaxDeliveryTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("MinDeliveryTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RestaurantCategoryId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul. \"Sitnyakovo\", 48, 1505, Oborishte, Sofia, Bulgaria",
                            AverageRating = 0.0,
                            CityId = 1,
                            ClosingHour = new DateTime(1900, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageURL = "~/images/Amerikanska/BurgerKing/BurgerKingBackground.jpg",
                            Latitude = 42.691631000000001,
                            Longitude = 23.353459999999998,
                            MaxDeliveryTimeInMinutes = 40,
                            MinDeliveryTimeInMinutes = 30,
                            OpeningHour = new DateTime(1900, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantCategoryId = 2,
                            ServiceFee = 3.99m,
                            Title = "Burger King",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "\"Hristo Botev\" Blvd 117, 1303 Sofia Center, Sofia, Bulgaria",
                            AverageRating = 0.0,
                            CityId = 1,
                            ClosingHour = new DateTime(1900, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageURL = "~/images/Mestna_hrana/Tarator/TaratorBackground.jpg",
                            Latitude = 42.703980000000001,
                            Longitude = 23.316980000000001,
                            MaxDeliveryTimeInMinutes = 60,
                            MinDeliveryTimeInMinutes = 50,
                            OpeningHour = new DateTime(1900, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            RestaurantCategoryId = 13,
                            ServiceFee = 4.99m,
                            Title = "Tarator",
                            TotalReviews = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "bulevard \"Cherni vrah\" 100, 1407 Krastova vada, Sofia, Bulgaria",
                            AverageRating = 0.0,
                            CityId = 1,
                            ClosingHour = new DateTime(1900, 1, 1, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageURL = "~/images/Zakuska/Mikel_Coffee/MikelCoffeeBackground.jpg",
                            Latitude = 42.653649999999999,
                            Longitude = 23.31541,
                            MaxDeliveryTimeInMinutes = 50,
                            MinDeliveryTimeInMinutes = 40,
                            OpeningHour = new DateTime(1900, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantCategoryId = 7,
                            ServiceFee = 1.99m,
                            Title = "Mikel Coffee",
                            TotalReviews = 0
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.RestaurantCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Азиатска"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Американска"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Арабска"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Вегетарианска"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Гръцка"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Десерти"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Закуска"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Здравословна"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Индийска"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Италианска"
                        },
                        new
                        {
                            Id = 11,
                            Title = "Международна"
                        },
                        new
                        {
                            Id = 12,
                            Title = "Мексиканска"
                        },
                        new
                        {
                            Id = 13,
                            Title = "Местна храна"
                        },
                        new
                        {
                            Id = 14,
                            Title = "Морски дарове"
                        },
                        new
                        {
                            Id = 15,
                            Title = "Напитки"
                        },
                        new
                        {
                            Id = 16,
                            Title = "Паста"
                        },
                        new
                        {
                            Id = 17,
                            Title = "Печива и сладкиши"
                        },
                        new
                        {
                            Id = 18,
                            Title = "Сандвич"
                        },
                        new
                        {
                            Id = 19,
                            Title = "Средиземноморска"
                        },
                        new
                        {
                            Id = 20,
                            Title = "Суши"
                        },
                        new
                        {
                            Id = 21,
                            Title = "Турска"
                        },
                        new
                        {
                            Id = 22,
                            Title = "Чай и кафе"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleCategory", "BlogArticleCategory")
                        .WithMany("BlogArticles")
                        .HasForeignKey("BlogArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogArticleCategory");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleComment", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", null)
                        .WithMany("BlogArticleComments")
                        .HasForeignKey("BlogArticleId");

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Item", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Items")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ItemSpicyCategory", "SpicyCategory")
                        .WithMany("Items")
                        .HasForeignKey("SpicyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");

                    b.Navigation("Restaurant");

                    b.Navigation("SpicyCategory");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemAddOn", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.AddOn", "AddOn")
                        .WithMany("ItemsAddOns")
                        .HasForeignKey("AddOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Item", "Item")
                        .WithMany("ItemsAddOns")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddOn");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemReview", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.RestaurantCategory", "RestaurantCategory")
                        .WithMany("Restaurants")
                        .HasForeignKey("RestaurantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("RestaurantCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.AddOn", b =>
                {
                    b.Navigation("ItemsAddOns");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticle", b =>
                {
                    b.Navigation("BlogArticleComments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.BlogArticleCategory", b =>
                {
                    b.Navigation("BlogArticles");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.City", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Item", b =>
                {
                    b.Navigation("ItemsAddOns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.ItemSpicyCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.Restaurant", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Infrastructure.Data.Models.RestaurantCategory", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
